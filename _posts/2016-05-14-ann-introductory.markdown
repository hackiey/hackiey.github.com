---
layout:     post
title:      "人工神经网络（序）"
subtitle:   ""
date:       2016-05-14 00:00:00
header-img: img/in-post/ann/ann2.jpg
author:     "Harry"
tags:
    - 机器学习
    - 人工神经网络
---

ICLR2016的最佳论文是《Neural Programmer-Interpreters》(神经程序解释器),Google DeepMind的Scot Reed和Nando de Freitas提出了一种神经程序解释器，它是一种递归性的合成神经网络，能学习对程序进行表征和执行。(新智元公众号在对这一文章宣传时用了“有望取代初级程序员”，足以说明这篇论文的重要性，在此强烈推荐这个公众号，它每天都会有很多介绍国内外人工智能技术的文章)

自从接触了人工智能，就一直梦想着可以实现能够写程序的程序，本想从这篇论文中得到一些灵感，但是读完相关工作后就读不懂了，我觉得肯定是因为基础不牢固的原因，NPI的基础是深度学习，深度学习的基础是神经网络，所以我从头开始学习人工神经网络。有人说学习的最好方法是教别人，我越来越赞成这一点了，因为等我足够有名了，肯定会有大神来指出我的错误(doge脸)，不过我一定会努力少犯错误，避免误导初学的小朋友。

这一系列文章主要参考Tom M. Mitchell的《机器学习》（更像是在抄书的时候加了点自己的理解）。在阅读之前你需要具备一定的微积分知识，在对人工神经网络中的一些数学方法做额外的介绍时，你还需要具备概率统计和线性代数的知识。

### 人工神经网络(ANN)

>技术来源于生活，又高于生活 ——Hackiey

飞机的发明已经是老掉牙的故事了，现在我们说说怎么造一个大脑。

尽管到目前为止，人类还无法理解人类是如何理解东西的，但是生物神经元(neuron)为生物和计算机领域提供了一个学习模型。生物学中，人类的大脑由$$10^{11}$$个神经元构成，每个神经元与其他$$10^{4}$$个神经元相连，这是一个惊人的数字！因此，即使生物神经元在传递信息时要比计算机慢几乎无数倍，但由于大量的并行计算仍然使得人类可以在极短的时间内做出很多复杂的决策。在计算机向生物学求教时，这几乎是最难迈的坎了(Google的深度学习已经达到数十亿的节点，但仍不能和人脑中的神经网络相比)，现有的计算能力根本无法达到这个要求，不过这并不是什么大问题，虽然摩尔定律最近不怎么灵了，但是早晚有一天我们会造出一个大脑来。

在具体的介绍之前，要先明确目前ANN的优势和缺陷。ANN适合解决以下特征的问题：

> 1. 实例是用很多“属性-值”对表示的
> 2. 目标函数的输出可能是离散值、实数值或者由若干实数属性或离散属性组成的向量
> 3. 训练数据可能包含错误
> 4. 可容忍长时间的训练
> 5. 可能需要快速求出目标函数值
> 6. 人类能否理解学到的目标函数是不重要的

`第一条中的实例指的是每一个训练实例，在训练过程中，要根据每一个实例的输入和输出来不断调整所学到的目标函数(所学到的权值)，缺一不可。`

ANN的训练过程是缓慢的，但是当训练完成投入使用时，对所学到的网络与输入进行求值时是非常快速的。

最令人激动的是最后一条，当你训练完一个ANN，你可能无法理解其中的权值代表着什么，但是它们凑在一起却可以获得正确的的答案！正如你无法理解自己的大脑，但是你的大脑却不会欺骗你。

简介之后进入正文，我会尽量实现每一个介绍到的算法(其实主要是为了练习刚学到的python，如果遇到错误请用力指正)，接下来会按照《机器学习》第四章中的内容逐个介绍ANN的几种主要单元：感知器(perceptron)、线性单元(linear unit)和sigmoid单元(sigmoid unit)。然后介绍训练这些单元组成的多层网络的反向传播算法，并考虑几个一般性问题，比如ANN的 表征能力、假设空间搜索的本质特征、过度拟合问题等。最终会逐步过滤到深度学习，并介绍本文开始提到的NPI(这才是终极目标啊！)。

实验所涉及的代码可以在[github](http://github.com/hackiey/machine-learning)上找到，主要是为了练习一下python，如果时间充裕的话会补上js版和lisp(作为初学者，这个同样是为了做练习)。

### 目录

1.1 [感知器](/2016/05/14/ann-perceptron-1/)(描述了感知器以及感知器训练法则)

1.2 [线性单元（梯度下降)](/2016/05/15/ann-perceptron-2/)(描述了梯度下降)

2.1 [多层网络和BP算法（一）](/2016/06/21/backpropagation/)(主要对反向传播算法进行了推导)
